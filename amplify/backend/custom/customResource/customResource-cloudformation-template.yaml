AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  {"createdOn":"Mac","createdBy":"Amplify","createdWith":"9.1.0","stackType":"custom-customCloudformation","metadata":{}}
Parameters:
  env:
    Type: String
    Default: dev
    Description: Please input your amplify env name !!!
Resources:
  EnvParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Join:
          - /
          - - /ppe/env
            - Ref: env
      Type: String
      Value:
        Ref: env
      Description: Env Variable
      Tags:
        Environment: DEV
  RandomParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Join:
          - /
          - - /ppe/random
            - Ref: env
      Type: String
      Value:
        Fn::Select:
          - 2
          - Fn::Split:
              - /
              - Ref: AWS::StackId
      Description: Random parameter for creating s3
      Tags:
        Environment: DEV
  SageMakerParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Join:
          - /
          - - /ppe/config/arn
            - Ref: env
      Type: String
      Value:
        Fn::GetAtt:
          - SageMakerRole
          - Arn
      Description: Arn for sagemaker
      Tags:
        Environment: DEV
  S3BucketModelCreation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - ppebucket
            - Fn::GetAtt:
                - RandomParameter
                - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  S3BucketPanoramaAppCreation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - panorama-app
            - Fn::GetAtt:
                - RandomParameter
                - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  S3BucketEventCreation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - event
            - Fn::GetAtt:
                - RandomParameter
                - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  S3BucketExportEventCreation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - export-event
            - Fn::GetAtt:
                - RandomParameter
                - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  S3BucketAppGraphCreation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - app-graph
            - Fn::GetAtt:
                - RandomParameter
                - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  S3BucketModelPretrainCreation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - pretraininput
            - Fn::GetAtt:
                - RandomParameter
                - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  S3BucketModelRetrainCreation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - retrainoutput
            - Fn::GetAtt:
                - RandomParameter
                - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  SageMakerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
                - panorama.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sagemaker:*
                Resource: '*'
              - Effect: Allow
                Action: iam:PassRole
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:iam::'
                      - Ref: AWS::AccountId
                      - ':role/amplifyppetest1LambdaRole*"'
              - Effect: Allow
                Action: s3:*
                Resource: '*'
              - Effect: Allow
                Action: ecr:*
                Resource: '*'
              - Effect: Allow
                Action: lambda:*
                Resource: '*'
              - Effect: Allow
                Action: panorama:*
                Resource: '*'
              - Effect: Allow
                Action: ssm:*
                Resource: '*'
              - Effect: Allow
                Action: iot:*
                Resource: '*'
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - lambda:*
                  - dynamodb:*
                  - ssm:*
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                  - sagemaker:*
                  - codebuild:*
                Resource: '*'
              - Effect: Allow
                Action: 
                  - iam:PassRole
                Resource: 
                  Fn::Join:
                    - ''
                    - - 'arn:aws:iam::'
                      - Ref: AWS::AccountId
                      - ':role/amplify-*'
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:*
                  - ecr:*
                  - ecs:*
                  - s3:*
                  - lambda:*
                  - dynamodb:*
                  - ssm:*
                  - codebuild:*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
                - states.amazonaws.com
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:*
                  - panorama:*
                  - s3:*
                  - lambda:*
                  - ssm:*
                  - codebuild:*
                  - logs:*
                  - dynamodb:*
                  - states:*
                Resource: '*'
  BuildPanoramaApp:
    Type: AWS::CodeBuild::Project
    Properties:
      Name:
        Fn::Join:
          - '-'
          - - Build-Panorama-App
            - Ref: env
      Description: Build Panorama App with Panorama Cli
      ServiceRole:
        Fn::GetAtt:
          - CodeBuildRole
          - Arn
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: 'true'
      Source:
        BuildSpec: deployment/buildspec_s3.yaml
        Location: https://github.com/hardco2020/aws-panorama-mlops.git
        Type: GITHUB
  PreinstalledPanoramaModel:
    Type: AWS::CodeBuild::Project
    Properties:
      Name:
        Fn::Join:
          - '-'
          - - Preinstalled-Panorama-Model
            - Ref: env
      Description: Preinstall the model fro Panorama Packaging Application
      ServiceRole:
        Fn::GetAtt:
          - CodeBuildRole
          - Arn
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: 'true'
      Source:
        BuildSpec: script/buildspec.yaml
        Location: https://github.com/hardco2020/aws-panorama-mlops.git
        Type: GITHUB
  DeleteS3Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      FunctionName:
        Fn::Join:
          - '-'
          - - deleteS3
            - Ref: env
      Environment:
        Variables:
          ENV:
            Ref: env
      Code:
        ZipFile: |
          import json
          import boto3 
          import cfnresponse
          import os

          def bucket_exist(bucketName, buckets):
            for bucket in buckets:
                if bucket['Name'] == bucketName:
                    return True
            return False
          def handler(event, context):
            try:
              random_p = boto3.client("ssm").get_parameter(Name="/ppe/random/" + os.environ["ENV"])["Parameter"]["Value"]
              if event['RequestType'] == 'Delete':
                s3_client = boto3.client('s3')
                s3_resource = boto3.resource('s3')
                
                buckets = s3_client.list_buckets()['Buckets']
                print(buckets)
                if(bucket_exist('pretraininput-' + random_p, buckets)):
                    pretrain = s3_resource.Bucket('pretraininput-' + random_p)
                    pretrain.object_versions.delete()

                if(bucket_exist('retrainoutput-' + random_p, buckets)):
                    retrain = s3_resource.Bucket('retrainoutput-' + random_p)
                    retrain.object_versions.delete()
                if(bucket_exist('panorama-app-' + random_p, buckets)):
                    panoramaApp = s3_resource.Bucket('panorama-app-' + random_p)
                    panoramaApp.object_versions.delete()
                
                if(bucket_exist('app-graph-' + random_p, buckets)):
                    appGraph = s3_resource.Bucket('app-graph-' + random_p)
                    appGraph.object_versions.delete()
                if(bucket_exist('event-' + random_p, buckets)):
                    eventBucket = s3_resource.Bucket('event-' + random_p)
                    eventBucket.object_versions.delete()
                if(bucket_exist('export-event-'+ random_p, buckets)):
                    exportEvent = s3_resource.Bucket('export-event-' + random_p)
                    exportEvent.object_versions.delete()   
              responseValue = 120
              responseData = {}
              responseData['Data'] = responseValue
              cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                responseData, 'scm-cfn-customresource-id')  
            except Exception as e:
              print(e)
              responseValue = 120
              responseData = {}
              responseData['Data'] = responseValue
              cfnresponse.send(event, context, cfnresponse.FAILED, 
                responseData, 'scm-cfn-customresource-id')
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Timeout: 300
  PreInstalledModelLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      FunctionName:
        Fn::Join:
          - '-'
          - - preinstallModel
            - Ref: env
      Environment:
        Variables:
          ENV:
            Ref: env
          REGION:
            Ref: AWS::Region
      Code:
        ZipFile: |
          import json
          import boto3 
          import cfnresponse
          import os

          def bucket_exist(bucketName, buckets):
            for bucket in buckets:
                if bucket['Name'] == bucketName:
                    return True
            return False
          def handler(event, context):
            try:
              random_p = boto3.client("ssm").get_parameter(Name="/ppe/random/" + os.environ["ENV"])["Parameter"]["Value"]
              if event['RequestType'] == "Create":
                codeBuild_client = boto3.client("codebuild")
                env_var = [
                    {
                      "name":"PRETRAIN_BUCKET",
                      "value": "s3://pretraininput-" + random_p,
                    },
                    {
                      "name":"APP_BUCKET",
                      "value": "s3://panorama-app-" + random_p
                    },
                    {
                      "name":"REGION",
                      "value": os.environ["REGION"]
                    }
                ]
                build = codeBuild_client.start_build(
                    projectName="Preinstalled-Panorama-Model-" + os.environ["ENV"],
                    environmentVariablesOverride=env_var,
                )
                build_id = build["build"]["id"]
              responseValue = 120
              responseData = {}
              responseData['Data'] = responseValue
              cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                responseData, 'scm-cfn-customresource-id')
            except Exception as e:
              print(e)
              responseValue = 120
              responseData = {}
              responseData['Data'] = responseValue
              cfnresponse.send(event, context, cfnresponse.FAILED, 
                responseData, 'scm-cfn-customresource-id')
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Timeout: 300
  ModelStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName:
        Fn::Join:
          - '-'
          - - Retrain
            - Ref: env
      DefinitionString: |-
            {
              "StartAt": "SkipTrain",
              "States": {
                "SkipTrain": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.skipTrain",
                      "BooleanEquals": true,
                      "Next": "DynamoDB PutItem (1)"
                    }
                  ],
                  "Default": "SageMaker CreateTrainingJob"
                },
                "DynamoDB PutItem (1)": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::dynamodb:putItem",
                  "Parameters": {
                    "TableName.$": "$.table_name",
                    "Item": {
                      "model_name": {
                        "S.$": "$.model_name"
                      },
                      "stage": {
                        "S": "Packaging"
                      },
                      "trainingJobStartTime": {
                        "S.$": "$$.Execution.StartTime"
                      }
                    }
                  },
                  "Next": "CodeBuild StartBuild (1)",
                  "ResultPath": null
                },
                "CodeBuild StartBuild (1)": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::codebuild:startBuild.sync",
                  "Parameters": {
                    "ProjectName.$": "$.project_name",
                    "EnvironmentVariablesOverride": [
                      {
                        "Name": "MODEL_NAME",
                        "Value.$": "$.model_name",
                        "Type": "PLAINTEXT"
                      },
                      {
                        "Name": "DB_TABLE_NAME",
                        "Value.$": "$.table_name",
                        "Type": "PLAINTEXT"
                      },
                      {
                        "Name": "GRAPH_S3",
                        "Value.$": "$.GRAPH_S3",
                        "Type": "PLAINTEXT"
                      },
                      {
                        "Name": "APP_S3_Uri",
                        "Value.$": "$.app_s3_uri",
                        "Type": "PLAINTEXT"
                      },
                      {
                        "Name": "APP_Name",
                        "Value.$": "$.app_name",
                        "Type": "PLAINTEXT"
                      }
                    ]
                  },
                  "End": true
                },
                "SageMaker CreateTrainingJob": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sagemaker:createTrainingJob",
                  "Parameters": {
                    "AlgorithmSpecification": {
                      "EnableSageMakerMetricsTimeSeries": true,
                      "TrainingImage.$": "$.TrainingImage",
                      "TrainingInputMode": "File"
                    },
                    "EnableInterContainerTrafficEncryption": false,
                    "EnableManagedSpotTraining": false,
                    "EnableNetworkIsolation": false,
                    "HyperParameters": {
                      "GRAPH_S3.$": "$.GRAPH_S3"
                    },
                    "InputDataConfig": [
                      {
                        "ChannelName": "cfg",
                        "DataSource": {
                          "S3DataSource": {
                            "S3DataDistributionType": "FullyReplicated",
                            "S3DataType": "S3Prefix",
                            "S3Uri.$": "$.cfgS3Uri"
                          }
                        }
                      },
                      {
                        "ChannelName": "weights",
                        "DataSource": {
                          "S3DataSource": {
                            "S3DataDistributionType": "FullyReplicated",
                            "S3DataType": "S3Prefix",
                            "S3Uri.$": "$.weightsS3Uri"
                          }
                        }
                      },
                      {
                        "ChannelName": "images",
                        "DataSource": {
                          "S3DataSource": {
                            "S3DataDistributionType": "FullyReplicated",
                            "S3DataType": "S3Prefix",
                            "S3Uri.$": "$.imagesS3Uri"
                          }
                        }
                      },
                      {
                        "ChannelName": "labels",
                        "DataSource": {
                          "S3DataSource": {
                            "S3DataDistributionType": "FullyReplicated",
                            "S3DataType": "S3Prefix",
                            "S3Uri.$": "$.labelsS3Uri"
                          }
                        }
                      }
                    ],
                    "OutputDataConfig": {
                      "S3OutputPath.$": "$.output_s3uri"
                    },
                    "ResourceConfig": {
                      "InstanceCount": 1,
                      "InstanceType.$": "$.instance_type",
                      "VolumeSizeInGB": 30
                    },
                    "RoleArn.$": "$.role_arn",
                    "StoppingCondition": {
                      "MaxRuntimeInSeconds": 86400
                    },
                    "TrainingJobName.$": "$.model_name"
                  },
                  "Next": "DynamoDB PutItem",
                  "ResultPath": null,
                  "ResultSelector": {
                    "model_name": "$.Payload.model_name",
                    "table_name": "$.Payload.table_name",
                    "project_name": "$.Payload.project_name",
                    "app_s3_uri": "$.Payload.app_s3_uri",
                    "GRAPH_S3": "$.Payload.GRAPH_S3",
                    "app_name_zip": "$.Payload.app_name_zip"
                  }
                },
                "DynamoDB PutItem": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::dynamodb:putItem",
                  "Parameters": {
                    "TableName.$": "$.table_name",
                    "Item": {
                      "model_name": {
                        "S.$": "$.model_name"
                      },
                      "stage": {
                        "S": "training"
                      }
                    }
                  },
                  "Next": "DescribeTrainingJob",
                  "ResultPath": null
                },
                "DescribeTrainingJob": {
                  "Type": "Task",
                  "Next": "Choice",
                  "Parameters": {
                    "TrainingJobName.$": "$.model_name"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:sagemaker:describeTrainingJob",
                  "ResultPath": "$.training"
                },
                "Choice": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.training.TrainingJobStatus",
                      "StringEquals": "InProgress",
                      "Next": "Wait"
                    },
                    {
                      "Variable": "$.training.TrainingJobStatus",
                      "StringEquals": "Completed",
                      "Next": "DynamoDB UpdateItem"
                    }
                  ],
                  "Default": "Fail",
                  "Comment": "if it's "
                },
                "Wait": {
                  "Type": "Wait",
                  "Seconds": 10,
                  "Next": "DescribeTrainingJob"
                },
                "Fail": {
                  "Type": "Fail"
                },
                "DynamoDB UpdateItem": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::dynamodb:updateItem",
                  "Parameters": {
                    "TableName.$": "$.table_name",
                    "Key": {
                      "model_name": {
                        "S.$": "$.model_name"
                      }
                    },
                    "UpdateExpression": "SET trainingJobStatus = :val, trainingJobModelDataUrl = :val2, trainingJobStartTime = :val3, trainingJobEndTime = :val4, stage= :val5",
                    "ExpressionAttributeValues": {
                      ":val": {
                        "S.$": "$.training.TrainingJobStatus"
                      },
                      ":val2": {
                        "S.$": "$.training.ModelArtifacts.S3ModelArtifacts"
                      },
                      ":val3": {
                        "S.$": "$.training.TrainingStartTime"
                      },
                      ":val4": {
                        "S.$": "$.training.TrainingEndTime"
                      },
                      ":val5": {
                        "S": "Packaging"
                      }
                    },
                    "ReturnValues": "UPDATED_NEW"
                  },
                  "Next": "CodeBuild StartBuild",
                  "ResultPath": null
                },
                "CodeBuild StartBuild": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::codebuild:startBuild.sync",
                  "Parameters": {
                    "ProjectName.$": "$.project_name",
                    "EnvironmentVariablesOverride": [
                      {
                        "Name": "MODEL_S3",
                        "Value.$": "$.training.ModelArtifacts.S3ModelArtifacts",
                        "Type": "PLAINTEXT"
                      },
                      {
                        "Name": "MODEL_NAME",
                        "Value.$": "$.training.TrainingJobName",
                        "Type": "PLAINTEXT"
                      },
                      {
                        "Name": "DB_TABLE_NAME",
                        "Value.$": "$.table_name",
                        "Type": "PLAINTEXT"
                      },
                      {
                        "Name": "GRAPH_S3",
                        "Value.$": "$.GRAPH_S3",
                        "Type": "PLAINTEXT"
                      },
                      {
                        "Name": "APP_S3_Uri",
                        "Value.$": "$.app_s3_uri",
                        "Type": "PLAINTEXT"
                      },
                      {
                        "Name": "APP_Name",
                        "Value.$": "$.app_name",
                        "Type": "PLAINTEXT"
                      }
                    ]
                  },
                  "End": true
                }
              }
            }
      RoleArn:
        Fn::GetAtt:
          - StateMachineRole
          - Arn
  StateMachineParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Join:
          - /
          - - /ppe/state/arn
            - Ref: env
      Type: String
      Value:
        Fn::GetAtt:
          - ModelStateMachine
          - Arn
      Description: Random parameter for creating s3
      Tags:
        Environment: DEV
  IotRule:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - lambda:*
                Resource: '*'
  IotTopic:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName:
        Fn::Join:
          - ''
          - - ppeEvent
            - Ref: env
      TopicRulePayload:
        Actions:
          # - DynamoDB:
          #     HashKeyField: CameraID
          #     HashKeyType: STRING
          #     HashKeyValue: ${CameraID}
          #     RangeKeyField: TimeStamp
          #     RangeKeyType: NUMBER
          #     RangeKeyValue: ${TimeStamp()}
          #     RoleArn:
          #       Fn::GetAtt:
          #         - IotRule
          #         - Arn
          #     TableName:
          #       Fn::Join:
          #         - '-'
          #         - - Event
          #           - Ref: env
          - Lambda:
              FunctionArn: !Sub
                - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sendEvent-${Env}'
                - Env: !Ref env 
        Description: >-
          Publish IOT topic for Panorama Devices to send alert message to
          Database
        Sql:
          Fn::Join:
            - ''
            - - SELECT * FROM 'ppe/event/
              - Ref: env
              - ''''
  PermissionForIotInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SendEventLambda
      Action: lambda:invokeFunction
      Principal: 'iot.amazonaws.com'
      SourceArn: !GetAtt IotTopic.Arn 
  SendEventLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      FunctionName:
        Fn::Join:
          - '-'
          - - sendEvent
            - Ref: env
      Environment:
        Variables:
          ENV:
            Ref: env
          REGION:
            Ref: AWS::Region
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          def handler(event, context):
            print('received event:')
            print(event)
            

            tableName = 'Event-' + os.environ["ENV"] 
            dynamodb = boto3.resource('dynamodb')
            table = dynamodb.Table(tableName)
            
            body = event
            body['TimeStamp'] = int(body['TimeStamp'])

            table.put_item(
              Item={
                'CameraID': body['CameraID'],
                'TimeStamp': body['TimeStamp'],
                'payload':  body,
                'tag': 'beta'
              }
            )
            
            return {
                'statusCode': 200,
                'headers': {
                    'Access-Control-Allow-Headers': '*',
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                },
                'body': json.dumps('Hello from your new Amplify Python lambda!')
            }
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Timeout: 300
  InvokePreinstalled:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    DependsOn:
      - PreinstalledPanoramaModel
      - PreInstalledModelLambda
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - PreInstalledModelLambda
          - Arn
  InvokeDeleteS3:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    DependsOn:
      - S3BucketEventCreation
      - S3BucketModelCreation
      - S3BucketPanoramaAppCreation
      - S3BucketExportEventCreation
      - S3BucketModelPretrainCreation
      - S3BucketModelRetrainCreation
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - DeleteS3Lambda
          - Arn
