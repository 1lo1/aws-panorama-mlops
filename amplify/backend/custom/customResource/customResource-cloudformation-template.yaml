AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  {"createdOn":"Mac","createdBy":"Amplify","createdWith":"9.1.0","stackType":"custom-customCloudformation","metadata":{}}
Parameters:
  env:
    Type: String
    Default: dev
    Description: Please input your amplify env name !!!
Resources:
  EnvParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Join:
          - /
          - - /ppe/env
            - Ref: env
      Type: String
      Value:
        Ref: env
      Description: Env Variable
      Tags:
        Environment: DEV
  RandomParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Join:
          - /
          - - /ppe/random
            - Ref: env
      Type: String
      Value:
        Fn::Select:
          - 2
          - Fn::Split:
              - /
              - Ref: AWS::StackId
      Description: Random parameter for creating s3
      Tags:
        Environment: DEV
  SageMakerParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Join:
          - /
          - - /ppe/config/arn
            - Ref: env
      Type: String
      Value:
        Fn::GetAtt:
          - SageMakerRole
          - Arn
      Description: Arn for sagemaker
      Tags:
        Environment: DEV
  S3BucketModelCreation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - ppebucket
            - Fn::GetAtt:
                - RandomParameter
                - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  S3BucketPanoramaAppCreation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - panorama-app
            - Fn::GetAtt:
                - RandomParameter
                - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  S3BucketEventCreation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - event
            - Fn::GetAtt:
                - RandomParameter
                - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  S3BucketExportEventCreation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - export-event
            - Fn::GetAtt:
                - RandomParameter
                - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  S3BucketAppGraphCreation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - app-graph
            - Fn::GetAtt:
                - RandomParameter
                - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  S3BucketModelPretrainCreation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - pretraininput
            - Fn::GetAtt:
                - RandomParameter
                - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  S3BucketModelRetrainCreation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - retrainoutput
            - Fn::GetAtt:
                - RandomParameter
                - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  SageMakerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
                - panorama.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sagemaker:*
                Resource: '*'
              - Effect: Allow
                Action: iam:PassRole
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:iam::'
                      - Ref: AWS::AccountId
                      - ':role/amplifyppetest1LambdaRole*"'
              - Effect: Allow
                Action: s3:*
                Resource: '*'
              - Effect: Allow
                Action: ecr:*
                Resource: '*'
              - Effect: Allow
                Action: lambda:*
                Resource: '*'
              - Effect: Allow
                Action: panorama:*
                Resource: '*'
              - Effect: Allow
                Action: ssm:*
                Resource: '*'
              - Effect: Allow
                Action: iot:*
                Resource: '*'
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:*
                  - ecr:*
                  - ecs:*
                  - s3:*
                  - lambda:*
                  - dynamodb:*
                  - ssm:*
                Resource: '*'
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:*
                  - ecr:*
                  - ecs:*
                  - s3:*
                  - lambda:*
                  - dynamodb:*
                  - ssm:*
                  - codebuild:*
                Resource: '*'
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
                - states.amazonaws.com
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:*
                  - panorama:*
                  - s3:*
                  - lambda:*
                  - ssm:*
                  - codebuild:*
                  - logs:*
                  - dynamodb:*
                  - states:*
                Resource: '*'
  BuildPanoramaApp:
    Type: AWS::CodeBuild::Project
    Properties:
      Name:
        Fn::Join:
          - '-'
          - - Build-Panorama-App
            - Ref: env
      Description: Build Panorama App with Panorama Cli
      ServiceRole:
        Fn::GetAtt:
          - CodeBuildRole
          - Arn
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: 'true'
      Source:
        BuildSpec: deployment/buildspec.yaml
        Location: https://github.com/hardco2020/aws-panorama-mlops.git
        Type: GITHUB
  PreinstalledPanoramaModel:
    Type: AWS::CodeBuild::Project
    Properties:
      Name:
        Fn::Join:
          - '-'
          - - Preinstalled-Panorama-Model
            - Ref: env
      Description: Preinstall the model fro Panorama Packaging Application
      ServiceRole:
        Fn::GetAtt:
          - CodeBuildRole
          - Arn
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: 'true'
      Source:
        BuildSpec: script/buildspec.yaml
        Location: https://github.com/hardco2020/aws-panorama-mlops.git
        Type: GITHUB
  PreInstalledModelLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      FunctionName:
        Fn::Join:
          - '-'
          - - preinstallModel
            - Ref: env
      Environment:
        Variables:
          ENV:
            Ref: env
          REGION:
            Ref: AWS::Region
      Code:
        ZipFile: |
          import json
          import boto3 
          import cfnresponse
          import os

          def handler(event, context):
            try:
              random_p = boto3.client("ssm").get_parameter(Name="/ppe/random/" + os.environ["ENV"])["Parameter"]["Value"]
              if event['RequestType'] == "Create":
                codeBuild_client = boto3.client("codebuild")
                env_var = [
                    {
                      "name":"PRETRAIN_BUCKET",
                      "value": "s3://pretraininput-" + random_p,
                    },
                    {
                      "name":"REGION"
                      "value": os.environ["REGION"]
                    }
                ]
                build = codeBuild_client.start_build(
                    projectName="Preinstalled-Panorama-Model-" + os.environ["ENV"],
                    environmentVariablesOverride=env_var,
                )
                build_id = build["build"]["id"]
                responseValue = 120
                responseData = {}
                responseData['Data'] = responseValue
                cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                  responseData, 'scm-cfn-customresource-id')
                return {
                    "statusCode": 200,
                    "build_id": build_id,
                }
              elif event['RequestType'] == 'Delete':
                s3_client = boto3.resource('s3')
                pretrain = s3_client.Bucket('pretraininput-' + random_p)
                pretrain.object_versions.delete()
                
                retrain = s3_client.Bucket('retrainoutput-' + random_p)
                retrain.object_versions.delete()
                
                panoramaApp = s3_client.Bucket('panorama-app-' + random_p)
                panoramaApp.object_versions.delete()
                
                appGraph = s3_client.Bucket('app-graph-' + random_p)
                appGraph.object_versions.delete()
                
                eventBucket = s3_client.Bucket('event-' + random_p)
                eventBucket.object_versions.delete()
                
                exportEvent = s3_client.Bucket('export-event-' + random_p)
                exportEvent.object_versions.delete()    
                cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                  responseData, 'scm-cfn-customresource-id')     
            except:
              responseValue = 120
              responseData = {}
              responseData['Data'] = responseValue
              cfnresponse.send(event, context, cfnresponse.FAILED, 
                responseData, 'scm-cfn-customresource-id')
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Timeout: 300
  ModelStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName:
        Fn::Join:
          - '-'
          - - Retrain
            - Ref: env
      DefinitionString:
        Fn::Sub:
          - |
            {
              "StartAt": "StartTrainingJob",
              "States": {
                "StartTrainingJob": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "arn:aws:lambda:${Region}:${AccountId}:function:createTrainingJob-${Env}:$LATEST"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "CheckTrainingJobStatus"
                },
                "CheckTrainingJobStatus": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName":"arn:aws:lambda:${Region}:${AccountId}:function:checkTrainingJobStatus-${Env}:$LATEST"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "BranchTrainingJobStatus"
                },
                "BranchTrainingJobStatus": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.status",
                      "StringEquals": "Completed",
                      "Next": "InvokeCodeBuild"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "InProgress",
                      "Next": "WaitTrainingJob"
                    }
                  ],
                  "Default": "Fail"
                },
                "InvokeCodeBuild": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                  "Parameters": {
                    "FunctionName": "arn:aws:lambda:${Region}:${AccountId}:function:triggerCodeBuild-${Env}:$LATEST",
                    "Payload": {
                      "token.$": "$$.Task.Token",
                      "otherInput.$": "$"
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "End": true,
                  "ResultPath": null
                },
                "WaitTrainingJob": {
                  "Type": "Wait",
                  "Seconds": 10,
                  "Next": "CheckTrainingJobStatus"
                },
                "Fail": {
                  "Type": "Fail"
                }
              }
            }
          - AccountId:
              Ref: AWS::AccountId
            Env:
              Ref: env
            Region:
              Ref: AWS::Region
            Resource: arn:aws-cn:states:::lambda:invoke
      RoleArn:
        Fn::GetAtt:
          - StateMachineRole
          - Arn
  StateMachineParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Join:
          - /
          - - /ppe/state/arn
            - Ref: env
      Type: String
      Value:
        Fn::GetAtt:
          - ModelStateMachine
          - Arn
      Description: Random parameter for creating s3
      Tags:
        Environment: DEV
  IotRule:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: '*'
  IotTopic:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName:
        Fn::Join:
          - ''
          - - ppeEvent
            - Ref: env
      TopicRulePayload:
        Actions:
          - DynamoDB:
              HashKeyField: CameraID
              HashKeyType: STRING
              HashKeyValue: ${CameraID}
              RangeKeyField: TimeStamp
              RangeKeyType: NUMBER
              RangeKeyValue: ${TimeStamp()}
              RoleArn:
                Fn::GetAtt:
                  - IotRule
                  - Arn
              TableName:
                Fn::Join:
                  - '-'
                  - - Event
                    - Ref: env
        Description: >-
          Publish IOT topic for Panorama Devices to send alert message to
          Database
        Sql:
          Fn::Join:
            - ''
            - - SELECT * FROM 'ppe/event/
              - Ref: env
              - ''''
  InvokePreinstalled:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    DependsOn:
      - ModelStateMachine
      - PreinstalledPanoramaModel
      - PreInstalledModelLambda
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - PreInstalledModelLambda
          - Arn
